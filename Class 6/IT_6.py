# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZIXFFT4Jnc-XipqI3hziLcY5BPe3uG2-
"""

# Create dataframe from dictionary

import pandas as pd
import numpy as np

employees = {
    'Emp_ID': [101, 102, 103, 104, 105],
    'Name': ['Hamza', 'Talha', 'Jawad', 'Honda', 'Yamaha'],
    'Age': [24, 56, 30, np.nan, 29],
    'Salary': [50000, 60000, 75000, 80000, np.nan],
    'Department': ['HR', 'IT', 'Finance', 'IT', 'HR'],
    'Location': ['NewYork', 'Islamabad', 'Karachi', 'Lahore', 'Hyderabad']
}
print(employees)

df = pd.DataFrame(employees)
print(df)

# Handle Missing Data

# print(df)

df['Age'].fillna(df['Age'].mean(), inplace=True)
# df['Salary'].fillna(df['Salary'].mean(), inplace=True)
# df.dropna(subset=['Salary'], inplace=True)
df.dropna(subset=['Salary'], inplace=True)
# df.dropna(inplace=True
print(df)

# Filter Employees

finance_Employees = df[df['Department'] == 'Finance']
print(finance_Employees)

# Sort Employees by Salary


df['Expirience'] = np.where(df['Salary'] > 30, 'Senior', 'Junior')
print(df)
sorted_df = df.sort_values(by='Salary', ascending=False)
print(sorted_df)

# Creating another dataframe for Merging

new_hires = {
    'Emp_ID': [106, 107],
    'Name': ['Ali', 'John'],
    'Age': [24, 56],
    'Salary': [55000, 65000],
    'Department': ['HR', 'Finance'],
    'Location': ['France', 'Germany']
}

df = pd.DataFrame(new_hires)
print(df)

df_final = pd.concat([sorted_df, df], ignore_index=True)
df_final['Expirience'] = np.where(df_final['Salary'] > 60000, 'Senior', 'Junior')
print(df_final)
# print(df_final)

# Matplot Lib

import matplotlib.pyplot as plt

# Create a sample dataset
# x = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]
x = [1, 2, 3, 4, 5]
y = [25, 16, 9, 4 , 0]

plt.plot(x, y, marker='o', linestyle='-')

plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Sample Plot')
plt.show()

fig, ax = plt.subplots(1, 2, figsize=(10, 5)) # 10, 5 are in inches

# first subplot
ax[0].plot([1, 2, 3, 4], [10, 20, 30, 40], marker='o', linestyle='--')
ax[0].set_xlabel('X-axis')
ax[0].set_ylabel('Y-axis')
ax[0].set_title('First Plot')

# second subplot
ax[1].bar(['A', 'B', 'C', 'D'], [10, 20, 30, 40])
ax[1].set_xlabel('X-axis')
ax[1].set_ylabel('Y-axis')
ax[1].set_title('Second Plot')
ax[1].set
plt.tight_layout()

plt.show()

plt.savefig('plot.png', dpi = 300, format = 'png', bbox_inches = 'tight')

x = np.linspace(0, 10, 10)
y1 = np.sin(x)
y2 = np.cos(x)

plt.figure(figsize=(10, 6))
# fig, ax = plt.subplots(1, 2, figsize=(10, 5))
plt.plot(x, y1, label='Sin(x)', marker='o', markerfacecolor = 'yellow', linestyle='-')
plt.plot(x, y2, label='Cos(x)', marker='x', linestyle='--')

plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Sin(x) and Cos(x) Functions')
plt.legend(loc = 'upper left')
plt.grid(True)
plt.annotate('Peak', xy = (1.57, 1), xytext=(3, 1.2), arrowprops={'facecolor': 'black'})
plt.show()

x = np.random.rand(50)
y = np.random.rand(50)

plt.scatter(x, y, marker='o', color='blue')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Scatter Plot')
plt.grid(True)
plt.show()

categories = np.random.randint(0, 3, 50)
colors = ['red', 'green', 'blue']

plt.scatter(x, y, c=[colors[i] for i in categories], marker='x')
# plt.hist(categories, bins=10, color='green', edgecolor='black')
plt.xlabel('Categories')
plt.ylabel('Frequency')
plt.title('Histogram')
plt.grid(True)
plt.show()

markers = ['o', 's', 'D']

for i, marker in enumerate(markers):
    plt.scatter(x[categories -- i], y[categories -- i], marker=marker, label=f'Category {i}', alpha=0.1)

plt.legend()
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Scatter Plot with Different Markers')
plt.grid(True)
plt.show()

